So let's take a look at our strategy for debugging this application. It's got two distinct parts, the front end and the back end. The back end is sitting at port 1337 and consists of Strapi that interfaces with SQLite database. But we can certainly hit localhost 1337 to see what data we've got in Strapi. And then for the front end we're going to use that to then test out its communication with the back end. And also we're going to need to communicate with Stripe. So that's the third part, is we need to check out and we need for Stripe to commit that transaction. So that's using the credit card data etc. OK, let's just focus on the back end now and see what we can do to test that out. So here I am in the browser and I can certainly hit localhost 1337. So we've got Strapi running there. Now let's take a look at hitting for example 'restaurants'. So we can hit that. Now you'll need to make sure that you've set the permissions in Strapi. So by that I mean in settings we need to make sure that for example in the roles I'm authenticated. Let's just take a look at this one. But we need permissions to access for example 'dish', 'order', 'restaurant'. So if I don't have that selected then I won't be able to hit it. Let me not save that. So let me select all again and save there. OK, I think there we weren't authenticated at all so we were using actually... If we're using roles and public, if this gets turned off, let me save that. Now let me hit 337 'restaurants error forbidden'. So if you can't get through on that then you need to go back to settings and make sure that you've got those set. And now we can go back and hit and everything's OK. So 'restaurants' is one of them. We should be able to hit 'restaurants/1'. I've only got one restaurant in this but that should also work. Whereas 'restaurant', if I've only got one restaurant and if I go to two it won't bring back any restaurants. There aren't any for 'restaurant 2'. Now we can also do 'localhost' instead of 'restaurants' we can do 'dishes'. And you can check out the URLs for example of the images. So let me look at 'restaurants' here. 'id1', 'dada', 'imagepng' and yes, let's have a look. URL is 'uploads/thumbnail/woods'. Here we go. So if I go to here, I've got two slashes. Let me just have one. That should work. Yes. OK, so there's a lot of data there we can access and test so our images work and those work. So 'testout' we can also obviously hit 'dishes' and 'orders' as well when we've got orders in there. So again here's the orders. OK, so that's one good way of doing it. The other way is using Postman where we can use GraphQL for example here, which is what the front end is going to use. So here we put the body, we put a GraphQL query and we can send that and it'll come back with data. And again we can see the images are up at uploads. We could even click on those and it'll go and get the image. OK, so Postman is really good because we can test out the posts as we saw there. We can still hit things like 'get orders'. Same thing. And if you don't have the right permissions it's going to give you an error but we can test out a lot about the back end using Postman and the browser. So other things that we can do is that we can look at the IDE in the browser to see what's happening when we hit the Strapi back end. So for example here, let me hit the 'restaurants' and if I look in 'networks' we'll see, let me do it again, we'll see this traffic here. So we can look at that request. So it was a 'get' and we had, it was 200 status codes so it was successful. And when we do posts we can actually see more going on except we can't do a post from the browser. Now the other thing we can do is obviously bring up the code base. And so let me bring that up. And it's a fairly straightforward standard Strapi back end. So there's almost nothing here to do with the front end except the API. Where we have the API consist of 'restaurant', 'order' and 'dish'. And these are very straightforward that they really don't have much code in them. Now this is using JSON to show the settings that we've got. So we've got 'dishes', we've got 'image', we've got 'name'. So there's really not that much there. The only place where we have activity is when we make an order. And we copied code in to 'order.js'. And what this is doing is it putting together basically, we're checking out, so it's putting the order together here. So create an order record. So it's getting a dress, amount, dishes, it's destructuring this request body. So we're pulling that out of this argument, this 'ctx' that's been passed in here. And we're creating an order that's going to go to Stripe. And you can see that it sends it here, this 'strepi-services-order-create'. It's creating that order. So here is the order. So in here we could always write out 'console.log', for example, 'ctx'. And we'd need to do a 'json.stringify' on it, but 'ctx' would allow us, when we posted an order, for example, to take a look at it. OK, so those are just some ideas for debugging. OK, bye for now.