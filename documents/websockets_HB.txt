The test with Firebase was pretty impressive and I wanted to see if I could write something myself to replicate the demo that they have. It's actually pretty straightforward. It's really, really simple. WebSockets have a very elegant, very efficient, high-performance technology. By now, those that are in the know, like the Google engineers and so on, it's no big deal. But if you haven't tried it, it's pretty impressive. So let me go ahead and walk you here through server, client, browser, etc. And so, first thing to note is that WebSockets are supported by a number of different packages. So I went ahead and used the one that is supposed to be the most higher performing. So it's just "ws" is the name of the package. You can download it from GitHub. You can see it here. This is the address. Just do a search for highest performing on GitHub and you'll find that it's also the most widely used. So you can see here the server side. I'm simply, this is going to run on node. And I'm simply here creating an instance of the socket or a new object for the socket. Then I register a broadcast function. So that means that every single time I broadcast, this is going to be called. And then here is my connection. So on connection, I'm simply going to broadcast. I'm also going to write to the console just to, so I can see it on the server side. The client, and this is a node client. This is not a browser client. It's simply, you know, eight lines of code. Basically making the connection to the server, opening it, and then on message. And this is coming back from the server right to the console. Now the browser, I've done pretty much the same thing that we did for the Firebase example and lecture. And you can see here that I have an init. I'm making a handshake. Now I'm not using Firebase, of course. I'm using WebSockets that it's available within the browser, you know, the newer browsers. And you can see here that I'm wiring up on open. I'm going to send the hello. Then for every new message that I get, I am going to display it on a div, as you can see here. And then I'm also going to go into post messages. And you can see here how I'm doing it. Basically get the value from the message box and then use the WebSocket to send it. Okay, so that's the code. I'm going to go ahead and now show you what I have here. I have four windows. Over here I have the server. I'm going to go ahead and start it. I made my windows a little bit smaller so that you could see. So this says node server here and I'm simply running the code that I showed you before. That's this one, right? And I'm going to go ahead and fire up the node server. Then I'm going to fire up the node client. And again, that's just node client.js, which is the code here on the second tab. Right, so I'm going to go ahead and hit return there. And now you can see there that I've already sent a client hello which has been written to the console on my server. And because it has been broadcast back, we've received that client hello back. Now this third window here is just a little tool that the WS developers give you to test. And so it's an interactive shell. So I'm just going to simply start it and I'm connecting it to that same server. You can see here localhost 8080. That's what we're using in the server, right? It's 8080. And then I'm going to fire up my web page. And now that's going to send an initial hello message. So we should see that show up. Let's go ahead and hit it. And yes, you can see here we got it on the server. Hello from browser. We got it on this other client. Hello from browser. And we also have it in this interactive shell here. So I'm now going to go ahead and make this a little bit bigger here. Not too big. But I'm going to say hello. I'm just going to say text box here. Text box, hello. Okay, so I'm going to post that message and you can see here that it's showing up on the server, on the client, and on this other one here. Now I can do the same thing from here. I'm going to say hello from command line. Hit return and you can see that that showed up on the text, on the web page, on the server, on the other client. And it came back here as well because it's just echoing whatever you send it. So this is pretty impressive. It's beautifully light. It's high performing and you can mix and match here as you can see pretty easily. Each of these windows could be an embedded device, you know, speaking JavaScript. You know, we've talked about that those boards already exist. You can have it on the page. So this is beautiful, beautiful, beautiful. I'm pretty excited about it. It's a bit like magic, you know, the ease in which you can wire this up. You could do it before, yeah, but this is very, very clean. So I'm going to go ahead and send this out. Try it. You got to try it. And we'll talk to you later. Okay, bye.