So we saw how to access Boston City's web server via a Node Express web server on our own machine. Now what we want to do is to move that server up to Amazon Web Services and repeat accessing the data in Boston City. Just to remind you, we've got in Boston City we wrote test.js. So let's take a quick look at test.js. Here it is. And what that's doing is we're using Express, we're listening on port 8081, and when we hit MIT, we're going out to get the data from Boston City. And then once all the data is read back, so here once we've ended reading the data, we're going to filter that data and here's the function myFilter, which is returning salaries above 400,000. So we zip up test.js so we can transfer it up to AWS. So that's our preparation. Now I want to show you that we've got a machine running on AWS. So I've got a clean machine here. Let me show you quickly how to provision it. So we've got a load onto it node and we need to load onto it Express, the package Express and the package HTTP. Let's quickly do that. So I've got all the commands here. So you should keep a copy of these commands because some of these are quite difficult to remember, but here they are. And let me just show you this one, the curl one. So here we see that it's quite long and remember it's got this sudo -e bash at the end. And then we install node.js and we do npm init and then install express and install HTTP. This is the command, the copy command for copying our zip file. So in fact this won't be code.zip, it'll be test.zip. So we need to know this is our key, so yours will be different. And you need, wherever you're launching this SCP command, you need to get the right path to your PEM file. And then you also need to know the name of the server, the Ubuntu server. So in this case our Ubuntu server is this one here. It's running on the east coast, we're running on North Virginia actually. And this is the name of the public DNS, so that'll be the name of our server. So I'm going to copy that. Right, let's go and execute all of these commands. So here, so I've SSH'd into the Ubuntu server. Now let's start provisioning it. So I'm going to go through the commands. So let's get the first one. We're going to do, first of all, apt-get and update. So here we go. Let me get that again. So I need to update, sudo update. So we copy this command and paste it into our server. There we go. So that's the first one. Now we need to do the curl. I copy the curl. So now we do the curl. Let me clear that. OK. That looks good. That's better. That one's done. Now we need to do this command. Node.js, we type node, we've got it running, 7 plus 8, 15. OK. Control-C to get out. So we've got node running. Now we need to do npm init. jrw and mit. OK. We're good. So now npm install express. And we're going to do minus minus save. Got express installed. npm install http. Now we've got that installed. And now I want to do-- I'm going to do the sc copy up here, and I'm going to need unzip. And that command is-- we need to do sudo apt install unzip. OK. Now I'm ready to copy. So here I've got test.zip. You see it there. And now I need to do the scp copy. And now in this copy-- so my key is up in this first dot PEM here. I'm copying test.zip. You don't need the dot slash, but it doesn't hurt. And now this is the name of the machine. Now you need to remember to put after the name of the machine colon squiggly slash dot. OK. And here we're going to copy it too. OK. We've copied that. Now I'm jumping back to-- so that was from my machine up to AWS copying. And now I need to do unzip. Test.zip. Oh, it seems like-- yes. Yeah, there it is. Now we need to run-- by the way, I set this machine up to have port 8081. So when I do test.js, it's going to listen on port 8081. Now I go back here. And let me get-- I've already done this once, but let me show you here. If I go back, I can hit the machine. And I'm getting the lucky number. Let me hit it. Let me reload. Oops, sorry, guys. Let me show you the machine. So I'm getting my lucky number. And now if I had the MIT path, it's going to go out and hit the Boston server. It's going to filter the data. And it's going to report this one person with salary over $400,000. So everything is now working with our server up on AWS. Perfect.