So we've got our MQTT broker Mosquito up and running in our container. It's running on port 1883 and we can access it via localhost on our own machine. And the topics that we're going to publish now and subscribe to, I've decided to call the main topic sensors and this is the subtopic if you like of John topic 2. So let's take a look at how we can code the publishing and the subscribing. Now as you can imagine what you'd like is when you subscribe you'd like to just wait there and have anything that's published to this topic passed to you. So the subscribe is going to be a long running process that basically we're just sitting there listening forever and then anything that gets published we want to have pushed to us. So let's do the publish part first and then we'll do the subscribe later and put the two together. So here's the beginning of the publish part. So we're going to use paho MQTT. So we need to do a pip install on paho-mqtt and then we're going to import it here paho.mqtt.client as mtt. Now we're going to import JSON because we need to wrap up any data that we're passing to MQTT as JSON. And then I'm going to use time because I want to sleep for perhaps one or two seconds and I'm going to use random because I'm going to create some random data. So this is going to be run in Python and we're going to publish first just one piece of data but later a stream of data. So here's the topic, here's our broker and our port number. Now we create a client. So we call mtt.client. So now we've got our client and we can now fire off connect and we specify the broker and the port and this will be a stay alive time of 60 seconds. And we can print out that we're connected on this port. And now we want to publish. So we'll publish and then sleep for one second and finally disconnect. Now what do we need to do to publish? Well, we need to get some data. So let's create some data. We're going to use JSON dumps to turn the data into JSON and inside here I'm going to make a dictionary and inside that dictionary I'll have temperature and then we'll give it a value say, why don't we do nine. Now we want to publish that data. So we publish to that topic and we publish the data. Okay, so let's take a look at running this. So let me save it and now to run it, I'll just run Python. And this is par publish. So there we are, I'd waited for one second. Now the problem with this, we don't know if it was published or not. So let's take a look at writing a subscribe. So that was published. Let's go to subscribe. So here we are in subscribe. I've got some code above here that we'll look at in a minute. But basically we do the same as before. We create a client and we call client connect. Now the only difference is that we're going to specify some callbacks here. Client has a number of callbacks that we can link our code to. One is on connect and another one is on message. Now here on connect, let's go and look at what we do on connect. So here is on connect that's going to be called when we connect. And what we're going to do is we're going to subscribe to the topic. So when we connect here, once we've connected, we're going to subscribe to the topic. Now we have a second one here that once we subscribed, we're going to get messages coming to us. And now we wire up another callback, client on message, to pick up any messages. And so this is standard that we have to look up what the callback takes. But then we're going to pick up the message. We're going to print out message.topic and message.payroll. And we're going to turn that into a string. So basically this is the data that's going to be passed to us. It's going to be printed out there. Now we need this to run not only to connect, but to basically sit there and spin. And so there's a loop forever that's provided that will allow us to sit there spinning. So let's get this running. So this is just going to be running in the background. And let me, in this case, I'm going to go to another terminal window and execute this subscription. So we get a window and let me now run. Okay, so we run that. So it's connected and it's just sitting there. And it's waiting now for us to run another program. Let me, so let's rerun this program. So here we go. It's printed out temperature nine. Let's be a little more daring and let's put a loop in here. For I in range, let's go for 100. Now I'm going to create data and I need to put, instead of nine here, let me get a random temperature. And I'll get one between zero and 100. Okay, so I've got a random temperature and now we're in this loop. We'll publish it and maybe we'll put a print published. And let's put data in here. And I'll make this an F string. Yes, that'll be fine. We'll sleep for one and then we'll disconnect. So let me save that and I'm going to run that in this window. And I need a colon here. And these all need to be indented. Okay, let's run that again. So you see here it's catching up now. There was a little delay. So we're subscribing and just watching this. Let's stop this one. And instead of sleeping for one, let's sleep for 0.1. And let's run this again. And you see over here that it's keeping up. So we're publishing and subscribing. And it keeps up, no problem. Let's go to 0.01, so hardly any delay at all. Let's see if it can keep up. Yep, no problem. So that's our publish and subscribe. And we're running in MQTT and we'll expand on this basic system and give you an exercise. Okay, bye for now.